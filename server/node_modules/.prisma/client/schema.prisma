// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String    @id @default(cuid())
  username  String    @unique
  email     String    @unique
  password  String
  role      String // ADMIN, LAB_TECH, PATHOLOGIST, RECEPTIONIST, DOCTOR
  firstName String
  lastName  String
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  createdOrders    Order[] @relation("CreatedBy")
  collectedSamples Order[] @relation("SampleCollectedBy")
  verifiedReports  Order[] @relation("VerifiedBy")

  @@map("users")
}

model Patient {
  id          String   @id @default(cuid())
  patientCode String   @unique
  firstName   String
  lastName    String
  dateOfBirth DateTime
  phone       String
  email       String?
  address     String?
  referredBy  String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("patients")
}

model Doctor {
  id             String   @id @default(cuid())
  name           String
  specialization String
  phone          String
  email          String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("doctors")
}

model Test {
  id            String   @id @default(cuid())
  name          String
  code          String   @unique
  category      String
  price         Float
  sampleType    String
  containerType String
  normalRange   String?
  unit          String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  orderTests OrderTest[]

  @@map("tests")
}

model Order {
  id                String    @id @default(cuid())
  orderNumber       String    @unique
  patientId         String
  referredBy        String?
  status            String    @default("PENDING") // PENDING, SAMPLE_COLLECTED, IN_PROCESS, REPORT_READY, DELIVERED
  createdBy         String
  sampleCollectedAt DateTime?
  sampleCollectedBy String?
  reportReadyAt     DateTime?
  verifiedBy        String?
  totalAmount       Float     @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  patient         Patient     @relation(fields: [patientId], references: [id])
  creator         User        @relation("CreatedBy", fields: [createdBy], references: [id])
  sampleCollector User?       @relation("SampleCollectedBy", fields: [sampleCollectedBy], references: [id])
  verifier        User?       @relation("VerifiedBy", fields: [verifiedBy], references: [id])
  orderTests      OrderTest[]

  @@map("orders")
}

model OrderTest {
  id      String  @id @default(cuid())
  orderId String
  testId  String
  result  String?
  notes   String?

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  test  Test  @relation(fields: [testId], references: [id])

  @@unique([orderId, testId])
  @@map("order_tests")
}
